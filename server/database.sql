CREATE DATABASE GROCERE;

\l --Use this to see all the databases present in your system
\c grocere -- Use this to connect to the grocere database
\dt --use this to see all the relations in the database
\! cls -- to clear screen

DROP TABLE USERS;

CREATE TABLE USERS (
    USER_ID BIGSERIAL PRIMARY KEY,
    FULLNAME VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    USER_TYPE VARCHAR(50) NOT NULL DEFAULT 'admin',
    ADDRESS VARCHAR(255),
    CONTACT VARCHAR(20) DEFAULT 'N/A' CHECK (CONTACT <> ''),
    CONSTRAINT EMAIL_USER_TYPE_UNIQUE UNIQUE (EMAIL, USER_TYPE),
    CONSTRAINT VALID_USER_TYPE CHECK (USER_TYPE IN ('admin', 'customer'))
);

ALTER TABLE USERS ADD COLUMN ADDRESS VARCHAR(255), ADD COLUMN CONTACT VARCHAR(20) DEFAULT 'N/A' CHECK (CONTACT <> '');



DROP TABLE CATEGORIES;

DROP TABLE PARENT_CATEGORIES;

CREATE TABLE CATEGORIES (
    CATEGORY_ID SERIAL PRIMARY KEY,
    CATEGORY_NAME VARCHAR(255) NOT NULL,
    SELLER_ID BIGINT,
    CONSTRAINT CATEGORY_USER_FK FOREIGN KEY (SELLER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE CATEGORY_PARENT_RELATIONSHIP (
    CATEGORY_ID BIGINT,
    PARENT_CATEGORY_ID BIGINT,
    SELLER_ID BIGINT,
    CONSTRAINT CATEGORY_PARENT_PK PRIMARY KEY (CATEGORY_ID, PARENT_CATEGORY_ID),
    CONSTRAINT CATEGORY_FK FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
    CONSTRAINT PARENT_CATEGORY_FK FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID) ON DELETE CASCADE
);

DROP TABLE PRODUCTS;

CREATE TABLE PRODUCTS (
    PRODUCT_ID BIGSERIAL PRIMARY KEY,
    PRODUCT_NAME VARCHAR(255) UNIQUE NOT NULL,
    DESCRIPTION VARCHAR(255),
    BASE_PRICE NUMERIC NOT NULL,
    DISCOUNT NUMERIC DEFAULT 0.00,
    UNIT VARCHAR(50) NOT NULL,
    STOCK NUMERIC NOT NULL CONSTRAINT CHECK_STOCK_NON_NEGATIVE CHECK (STOCK >= 0),
    PRODUCT_IMAGE VARCHAR(100),
    SELLER_ID BIGINT,
    STATUS VARCHAR(20) DEFAULT 'Published' CHECK (STATUS IN ('Hidden', 'Published')),
    CONSTRAINT CATEGORY_USER_FK FOREIGN KEY (SELLER_ID) REFERENCES USERS(USER_ID)
);

ALTER TABLE PRODUCTS ADD COLUMN STATUS VARCHAR(20) DEFAULT 'Published' CHECK (STATUS IN ('Hidden', 'Published'));

-- UPDATE products
-- SET status = 'Published'
-- WHERE status IS NULL;

DROP TABLE PRODUCT_CATEGORY_RELATIONSHIP;

CREATE TABLE PRODUCT_CATEGORY_RELATIONSHIP (
    PRODUCT_ID BIGINT,
    CATEGORY_ID BIGINT,
    SELLER_ID BIGINT,
    CONSTRAINT PRODUCT_CATEGORY_PK PRIMARY KEY (PRODUCT_ID, CATEGORY_ID),
    CONSTRAINT CATEGORY_FK FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
    CONSTRAINT PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE CASCADE,
    CONSTRAINT SELLER_FK FOREIGN KEY (SELLER_ID) REFERENCES USERS(USER_ID)
);

DROP TABLE CART;

CREATE TABLE CART (
    CART_ID BIGSERIAL PRIMARY KEY,
    CUSTOMER_ID BIGINT,
    PRODUCT_LIST JSONB[],
    TOTAL_PRICE NUMERIC NOT NULL,
    DISCOUNT_TOTAL NUMERIC NOT NULL DEFAULT 0.0,
    PRODUCT_COUNT INTEGER NOT NULL DEFAULT 0,
    STATUS VARCHAR(20) NOT NULL DEFAULT 'pending',
    CONSTRAINT VALID_STATUS CHECK (STATUS IN ('pending', 'done')),
    CONSTRAINT CATEGORY_CART_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES USERS(USER_ID)
);

DROP TABLE CART_PRODUCT;

CREATE TABLE CART_PRODUCT (
    CART_ID BIGINT,
    PRODUCT_ID BIGINT,
    CUSTOMER_ID BIGINT,
    QUANTITY INTEGER NOT NULL,
    STATUS VARCHAR(20) NOT NULL DEFAULT 'pending',
    CONSTRAINT VALID_CART_PRODUCT_STATUS CHECK (STATUS IN ('pending', 'done')),
    CONSTRAINT CART_PRODUCT_FK_CART FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
    CONSTRAINT CART_PRODUCT_FK_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT CART_PRODUCT_FK_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT UNIQUE_CART_PRODUCT_COMBINATION UNIQUE (CART_ID, PRODUCT_ID, CUSTOMER_ID)
);

DROP TABLE ORDERED_PRODUCT;

DROP TABLE ORDERS;

CREATE TABLE ORDERS (
    ORDER_ID BIGSERIAL PRIMARY KEY,
    CART_ID BIGINT,
    CUSTOMER_ID BIGINT,
    ORDER_DATE DATE DEFAULT CURRENT_DATE,
    CUSTOMER_DETAILS JSONB,
    STATUS VARCHAR(20) DEFAULT 'Pending' CHECK (STATUS IN ('Approved', 'Shipped', 'Pending', 'Completed')),
    CONSTRAINT CART_FK FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
    CONSTRAINT CUSTOMER_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT UNIQUE_CART_CUSTOMER_COMBINATION UNIQUE (CART_ID, CUSTOMER_ID)
);

UPDATE ORDERS
SET
    ORDER_DATE = '2023-12-09'
WHERE
    ORDER_ID = 15;

CREATE TABLE ORDERED_PRODUCT (
    PRODUCT_ID BIGINT,
    ORDER_ID BIGINT,
    QUANTITY INTEGER NOT NULL,
    CONSTRAINT ORDER_PRODUCT_PK PRIMARY KEY (PRODUCT_ID, ORDER_ID),
    CONSTRAINT PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT ORDER_FK FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
);

CREATE TABLE reviews (
    review_id bigserial PRIMARY KEY,
    rating INTEGER NOT NULL CHECK (rating >= 0 AND rating <= 5),
    review_text TEXT,
    reviewer_id bigint,
    reviewer_fullname VARCHAR(255),
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    product_id bigint,
    
    CONSTRAINT reviewer_fk FOREIGN KEY (reviewer_id) REFERENCES users(user_id),
    CONSTRAINT product_fk FOREIGN KEY (product_id) REFERENCES products(product_id)
);

drop table notifications;

CREATE TABLE notifications (
    notification_id bigserial PRIMARY KEY,
    order_id bigint,
    customer_name VARCHAR(255) NOT NULL,
    seller_id bigint,
    order_date DATE,
    status VARCHAR(20) DEFAULT 'not checked' CHECK (status IN ('checked', 'not checked')),
    CONSTRAINT order_fk FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    CONSTRAINT customer_fk FOREIGN KEY (seller_id) REFERENCES users(user_id) ON DELETE CASCADE
);











